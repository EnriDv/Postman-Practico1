{
	"info": {
		"_postman_id": "b6b6c686-0a3b-487b-9f38-3fe9f4d5fea4",
		"name": "GoRest",
		"description": "ENRIQUE DIAZ",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44065375",
		"_collection_link": "https://jose-5507672.postman.co/workspace/Jose's-Workspace~bb17f57c-84b5-4db4-87c5-5092a19afb2f/collection/44065375-b6b6c686-0a3b-487b-9f38-3fe9f4d5fea4?action=share&source=collection_link&creator=44065375"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Create User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Genera un email aleatorio para evitar el error 'email has already been taken'",
									"var randomEmail = \"juancarlos.\" + pm.variables.replaceIn(\"{{$randomInt}}\") + \"@test.com\";",
									"pm.environment.set(\"userEmail\", randomEmail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time below 2000ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Response should be JSON\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    pm.expect(responseJson).to.have.property(\"id\");",
									"    pm.expect(responseJson).to.have.property(\"name\");",
									"    pm.expect(responseJson).to.have.property(\"email\");",
									"    pm.expect(responseJson).to.have.property(\"gender\");",
									"    pm.expect(responseJson).to.have.property(\"status\");",
									"});",
									"",
									"pm.environment.set(\"userId\", responseJson.id);",
									"// Almacenar también los valores actuales para la prueba de 'Get User Detail'",
									"pm.environment.set(\"userName\", responseJson.name);",
									"pm.environment.set(\"userEmail\", responseJson.email);",
									"pm.environment.set(\"userGender\", responseJson.gender);",
									"pm.environment.set(\"userStatus\", responseJson.status);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{userName}}\",\r\n    \"gender\": \"{{userGender}}\",\r\n    \"email\": \"{{userEmail}}\",\r\n    \"status\": \"{{userStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Generated from cURL: curl -i -H \"Accept:application/json\" -H \"Content-Type:application/json\" -H \"Authorization: Bearer e582c281c7b7462e01a3a05be8f93aaa4b40dda654ceb0126ba3f538b43da610\" -XPOST \"https://gorest.co.in/public/v2/users\" -d '{\"name\":\"Tenali Ramakrishna\", \"gender\":\"male\", \"email\":\"tenali.ramakrishna@15ce.com\", \"status\":\"active\"}'"
					},
					"response": []
				},
				{
					"name": "Get User Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an object\", function () {",
									"    pm.expect(responseJson).to.be.an(\"object\");",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const user = responseJson;",
									"",
									"    pm.expect(user).to.have.property(\"id\");",
									"    pm.expect(user).to.have.property(\"name\");",
									"    pm.expect(user).to.have.property(\"email\");",
									"    pm.expect(user).to.have.property(\"gender\");",
									"    pm.expect(user).to.have.property(\"status\");",
									"});",
									"",
									"pm.test(\"Response data is correct\", function () {",
									"    // El ID se guarda como número y pm.environment.get lo devuelve como string, por eso usamos parseInt",
									"    pm.expect(responseJson.id).to.eql(parseInt(pm.environment.get(\"userId\")));",
									"    pm.expect(responseJson.name).to.eql(pm.environment.get(\"userName\"));",
									"    pm.expect(responseJson.email).to.eql(pm.environment.get(\"userEmail\"));",
									"    pm.expect(responseJson.gender).to.eql(pm.environment.get(\"userGender\"));",
									"    pm.expect(responseJson.status).to.eql(pm.environment.get(\"userStatus\"));",
									"});",
									"",
									"pm.test(\"Content-type header is present\", function () {",
									"    pm.response.to.have.header(\"Content-type\");",
									"});",
									"",
									"pm.test(\"Content-type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/users/{{userId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time below 2000ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Response should be JSON\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Generated from cURL: curl -i -H \"Accept:application/json\" -H \"Content-Type:application/json\" -H \"Authorization: Bearer e582c281c7b7462e01a3a05be8f93aaa4b40dda654ceb0126ba3f538b43da610\" -XGET \"https://gorest.co.in/public/v2/users\""
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Actualizar las variables de entorno con nuevos datos para el PATCH",
									"pm.environment.set(\"userName\", \"Juan Carlos Modificado\");",
									"pm.environment.set(\"userStatus\", \"inactive\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time below 2000ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Response should be JSON\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Verificar que el nombre sea correcto\", function()",
									"{",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).eql(pm.environment.get(\"userName\"));",
									"    pm.expect(jsonData.status).eql(pm.environment.get(\"userStatus\"));",
									"});",
									"",
									"// postman.setEnvironmentVariable('username', jsonData.name)",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{userName}}\", \r\n    \"status\":\"{{userStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/{{userId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						},
						"description": "Generated from cURL: curl -i -H \"Accept:application/json\" -H \"Content-Type:application/json\" -H \"Authorization: Bearer e582c281c7b7462e01a3a05be8f93aaa4b40dda654ceb0126ba3f538b43da610\" -XPATCH \"https://gorest.co.in/public/v2/users/7440265\" -d '{\"name\":\"Allasani Peddana\", \"email\":\"allasani.peddana@15ce.com\", \"status\":\"active\"}'"
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function(){",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response time below 2000ms\", function(){",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/users/{{userId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						},
						"description": "Generated from cURL: curl -i -H \"Accept:application/json\" -H \"Content-Type:application/json\" -H \"Authorization: Bearer e582c281c7b7462e01a3a05be8f93aaa4b40dda654ceb0126ba3f538b43da610\" -XDELETE \"https://gorest.co.in/public/v2/users/7440265\""
					},
					"response": []
				}
			]
		},
		{
			"name": "Post",
			"item": [
				{
					"name": "Create Post",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const title = pm.variables.replaceIn(\"{{$randomLoremWords}}\");",
									"const body = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");",
									"",
									"pm.environment.set(\"postTitle\", title);",
									"pm.environment.set(\"postBody\", body);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response is not empty\", function () {",
									"    var responseJson = pm.response.json();",
									"    pm.expect(Object.keys(responseJson).length).is.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Post has correct structure\", function () {",
									"    var responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson).to.have.property(\"id\");",
									"    pm.expect(responseJson).to.have.property(\"user_id\");",
									"    pm.expect(responseJson).to.have.property(\"title\");",
									"    pm.expect(responseJson).to.have.property(\"body\");",
									"});",
									"",
									"pm.environment.set(\"postId\", pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{postTitle}}\",\n    \"body\": \"{{postBody}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/{{userId}}/posts",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieves user posts",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/users/{{userId}}/posts",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct data types\", function () {",
									"    var posts = responseJson;",
									"",
									"    for(const post of posts) {",
									"        pm.expect(post.id).to.be.a(\"number\");",
									"        pm.expect(post.user_id).to.be.a(\"number\");",
									"        pm.expect(post.title).to.be.a(\"string\");",
									"        pm.expect(post.body).to.be.a(\"string\");",
									"    }",
									"});",
									"",
									"pm.test(\"Response elements have correct structure\", function () {",
									"    var posts = responseJson;",
									"",
									"    for(const post of posts) {",
									"        pm.expect(post).to.have.property(\"id\");",
									"        pm.expect(post).to.have.property(\"user_id\");",
									"        pm.expect(post).to.have.property(\"title\");",
									"        pm.expect(post).to.have.property(\"body\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/posts",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Post",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const title = pm.variables.replaceIn(\"{{$randomLoremWords}}\");",
									"const body = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");",
									"",
									"pm.environment.set(\"postTitle\", title);",
									"pm.environment.set(\"postBody\", body);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Post information is correct\", function () {",
									"    var responseJson = pm.response.json();",
									"    // user_id es un número, userId es un string en el env. Hay que parsear.",
									"    pm.expect(responseJson.user_id).to.eql(parseInt(pm.environment.get(\"userId\")));",
									"    pm.expect(responseJson.title).to.eql(pm.environment.get(\"postTitle\"));",
									"    pm.expect(responseJson.body).to.eql(pm.environment.get(\"postBody\"));",
									"});",
									"",
									"",
									"pm.test(\"Post has correct structure\", function () {",
									"    var responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson).to.have.property(\"id\");",
									"    pm.expect(responseJson).to.have.property(\"user_id\");",
									"    pm.expect(responseJson).to.have.property(\"title\");",
									"    pm.expect(responseJson).to.have.property(\"body\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{postTitle}}\",\n    \"body\": \"{{postBody}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/posts/{{postId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/posts/{{postId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts",
								"{{postId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comment",
			"item": [
				{
					"name": "Create Comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const commentBody = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");",
									"",
									"pm.environment.set(\"commentBody\", commentBody);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Comment has correct structure\", function () {",
									"    var responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson).to.have.property(\"id\");",
									"    pm.expect(responseJson).to.have.property(\"post_id\");",
									"    pm.expect(responseJson).to.have.property(\"name\");",
									"    pm.expect(responseJson).to.have.property(\"email\");",
									"    pm.expect(responseJson).to.have.property(\"body\");",
									"});",
									"",
									"pm.test(\"Comment has correct data types\", function () {",
									"    var responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson.id).to.be.a(\"number\");",
									"    pm.expect(responseJson.post_id).to.be.a(\"number\");",
									"    pm.expect(responseJson.name).to.be.a(\"string\");",
									"    pm.expect(responseJson.email).to.be.a(\"string\");",
									"    pm.expect(responseJson.body).to.be.a(\"string\");",
									"})",
									"",
									"pm.environment.set(\"commentId\", pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{userName}}\",\n    \"email\": \"{{userEmail}}\",\n    \"body\": \"{{commentBody}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/posts/{{postId}}/comments",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts",
								"{{postId}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Items have the correct data types\", function () {",
									"    const comments = pm.response.json();",
									"",
									"    for(const comment of comments) {",
									"        pm.expect(comment.id).to.be.a(\"number\");",
									"        pm.expect(comment.post_id).to.be.a(\"number\");",
									"        pm.expect(comment.name).to.be.a(\"string\");",
									"        pm.expect(comment.email).to.be.a(\"string\");",
									"        pm.expect(comment.body).to.be.a(\"string\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/comments",
							"host": [
								"{{url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const body = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");",
									"",
									"pm.environment.set(\"commentBody\", body);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Comment body is correctly patched\", function () {",
									"   pm.expect(pm.response.json().body).to.eql(pm.environment.get(\"commentBody\")); ",
									"});",
									"",
									"pm.test(\"Comment body is a string\", function () {",
									"    pm.expect(pm.response.json().body).to.be.a(\"string\");",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"body\": \"{{commentBody}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/comments/{{commentId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/comments/{{commentId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ToDo",
			"item": [
				{
					"name": "Create Todo",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const title = pm.variables.replaceIn(\"{{$randomLoremWords}}\");",
									"const statusList = [\"pending\", \"completed\"];",
									"// Formato de fecha ISO 8601 requerido por GoRest",
									"const date = new Date(new Date().getTime() + (2 * 24 * 60 * 60 * 1000)).toISOString(); // 2 días en el futuro",
									"",
									"const indexStatusList = Math.floor(Math.random() * statusList.length);",
									"",
									"pm.environment.set(\"todoTitle\", title);",
									"pm.environment.set(\"todoStatus\", statusList[indexStatusList]);",
									"pm.environment.set(\"todoDueOn\", date);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request (201)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response body has correct data types\", function () {",
									"   const responseJson = pm.response.json();",
									"",
									"   pm.expect(responseJson.user_id).to.be.a(\"number\"); ",
									"   pm.expect(responseJson.title).to.be.a(\"string\"); ",
									"   pm.expect(responseJson.due_on).to.be.a(\"string\"); ",
									"   pm.expect(responseJson.status).to.be.a(\"string\"); ",
									"});",
									"",
									"pm.test(\"Response body contains correct keys\", function () {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson).to.have.property(\"id\");",
									"    pm.expect(responseJson).to.have.property(\"user_id\");",
									"    pm.expect(responseJson).to.have.property(\"title\");",
									"    pm.expect(responseJson).to.have.property(\"due_on\");",
									"    pm.expect(responseJson).to.have.property(\"status\");",
									"});",
									"",
									"",
									"pm.environment.set(\"todoId\", pm.response.json().id);",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n    \"title\": \"{{todoTitle}}\",\n    \"status\": \"{{todoStatus}}\",\n    \"due_on\": \"{{todoDueOn}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/{{userId}}/todos",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Todos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct data types\", function () {",
									"    var todos = pm.response.json();",
									"",
									"    for(const todo of todos) {",
									"        pm.expect(todo.id).to.be.a(\"number\");",
									"        pm.expect(todo.user_id).to.be.a(\"number\");",
									"        pm.expect(todo.title).to.be.a(\"string\");",
									"        pm.expect(todo.status).to.be.a(\"string\");",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Response elements have correct structure\", function () {",
									"    var todos = pm.response.json();",
									"",
									"    for(const todo of todos) {",
									"        pm.expect(todo).to.have.property(\"id\");",
									"        pm.expect(todo).to.have.property(\"user_id\");",
									"        pm.expect(todo).to.have.property(\"title\");",
									"        pm.expect(todo).to.have.property(\"due_on\");",
									"        pm.expect(todo).to.have.property(\"status\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/todos",
							"host": [
								"{{url}}"
							],
							"path": [
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Todo",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const title = pm.variables.replaceIn(\"{{$randomLoremWords}}\");",
									"const statusList = [\"completed\", \"pending\"];",
									"",
									"const indexStatusList = Math.floor(Math.random() * statusList.length);",
									"",
									"pm.environment.set(\"todoTitle\", title);",
									"pm.environment.set(\"todoStatus\", statusList[indexStatusList]);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{todoTitle}}\",\n    \"status\": \"{{todoStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/todos/{{todoId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"todos",
								"{{todoId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Todo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/todos/{{todoId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"todos",
								"{{todoId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{BearerToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "name",
			"value": ""
		}
	]
}